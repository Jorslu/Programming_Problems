I have the problem domain, and possibly a working main class that I hopefully
copied correctly.

I have to implement printPopulation and printWorld.

I'll tackle printPopulation first.

By the looks of it, it seems like my classes are going to need to extend from
an abstract class because of the constructor situation.

PrintPopulation and printWorld are probably going to be interfaces.

I'm thinking I need one Population Interface and two methods for the different
population functions. One is going to recursively call it's children while
passing the populationTotal parameter (For World, Country, and States) and
another is going to add it's (this->population) to the total and return the
sum (for City and District)

I took this a little too far from the beginning. Let's start step by step.
Here's the plan to tackle this problem.

- Make Program Compile by creating all of the constructors
- Implement PrintPopulation interface/classes
- Implement PrintWorld interface/class


* Tried making abstract World Constructor - Doesn't make sense because why
  would you want one super class containing all of your programs constructors?

* Each Class has its own overloaded constructors because we have several
  different ways to construct the classes given the myWorld initialization.

* Also want to mention that you want to start these from the "bottom up" so
  the compiler can guide you a little bit. (Cities & Districts -> States ->
  Countries -> World)

* Along with the bottom up approach, because of the specs given, I am also
  making a hierarchy that looks like this for abstract class inheritance

        Name - Has a name -----------------------------------------------
        |                                                               |
        Population - Classes with Population (and parent name)          State - Has cities and districts + parent vars
        |								|
        CityDistrict - Class has both parent name and population        Country - has States + parent vars
									|
									World - Has countries + parent vars
    
* Just finished the Inheritance Hierarchy, next up is the Implement PrintPopulation with interfaces

* Just finished the printPopulation. Essentially, what I did here was
  implement the interface in all of the abstract classes. The reason
  for this is because every class needs to implement a printPopulation
  method and using interfaces guarantees that each class can call it’s
  sub-class and an exception won’t be thrown. Essentially, the interface
  is a contract that all of the classes must abide by (i.e. They must 
  implement the method.)

* For the printWorld(), Something similar should go on. There will be a
  PrintWorldInterface with a printWorld() method. Then starting from the
  top, World -> Country -> States -> City -> District. It will happen in
  a tree traversal fashion (I can’t remember the name of the traversal
  algo. off the top of my head [Top down depth first?]) but essentially, the method will look
  something like this.

  printWorld() {
    print this.name;
    children.printWorld();
  }

* Just finished printWorld implementation. Went smoothly. Again, the reason for the interface
  was so the classes/sub-classes had a contract to have that method.

* Going to go back through the program and add comments in and fix up any small code style
  issues.

* Added a couple of comments, there is definitely one in the WorldAbstract and CountryAbstract classes
  about me not understanding why a particular section works. Just thought you should know about those,
  since I would probably research as to why the super(name) doesn’t work in World. I also re-ordered
  the code so you may understand it and read it a bit easier.

* I hope you enjoyed this OOP Code sample! I did my best to stay away from google, though I did use
  the javadocs as it’s been a little while and needed a java refresher. I’d love to answer any questions
  or make things clearer. Just shoot me an email.

- Jorge Perez

Sources:

- Where I got the problem from. I stayed above the solution explanation. Hopefully there’s some differences
in our approach!
http://blog.sirhamy.com/interviewq-myworld-solution/

- I used this page to implement the abstract classes and inheritance correctly.
https://docs.oracle.com/javase/tutorial/java/IandI/index.html

- Arbitrary Number of Arguments. Learned something new!
https://docs.oracle.com/javase/tutorial/java/javaOO/arguments.html